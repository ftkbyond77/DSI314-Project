# Generated by Django 5.2.7 on 2025-10-27 13:49

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0004_plan_version'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PrioritizationFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback_type', models.CharField(choices=[('priority', 'Task Priority'), ('schedule', 'Schedule Quality'), ('content', 'Content Relevance'), ('overall', 'Overall Plan')], default='overall', max_length=20)),
                ('rating_type', models.CharField(choices=[('thumbs', 'Thumbs Up/Down'), ('stars', 'Star Rating'), ('detailed', 'Detailed Feedback')], default='stars', max_length=20)),
                ('thumbs_up', models.BooleanField(blank=True, help_text='Thumbs up (True) or down (False)', null=True)),
                ('star_rating', models.IntegerField(blank=True, help_text='Star rating (1-5)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('task_name', models.CharField(blank=True, help_text='Specific task being rated', max_length=512)),
                ('task_priority_suggested', models.IntegerField(blank=True, help_text="User's suggested priority for this task", null=True)),
                ('feedback_text', models.TextField(blank=True, help_text='Optional text feedback')),
                ('aspects', models.JSONField(blank=True, default=dict, help_text='Specific aspects rated: {urgency: 4, complexity: 5, etc}')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='For abuse prevention', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='Browser/device info')),
                ('processed', models.BooleanField(default=False, help_text='Whether feedback has been used to adjust model')),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('context_metadata', models.JSONField(blank=True, default=dict, help_text='Additional context: user experience level, domain, etc')),
            ],
            options={
                'verbose_name': 'Prioritization Feedback',
                'verbose_name_plural': 'Prioritization Feedbacks',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='QuizAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_answer', models.CharField(choices=[('a', 'A'), ('b', 'B'), ('c', 'C'), ('d', 'D')], help_text="User's selected answer", max_length=1)),
                ('is_correct', models.BooleanField(help_text='Whether answer was correct')),
                ('answered_at', models.DateTimeField(auto_now_add=True)),
                ('time_spent_seconds', models.IntegerField(default=0, help_text='Time spent on this question')),
                ('difficulty_rating', models.IntegerField(blank=True, help_text="User's rating of question difficulty (1-5)", null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
            ],
            options={
                'verbose_name': 'Quiz Answer',
                'verbose_name_plural': 'Quiz Answers',
                'ordering': ['answered_at'],
            },
        ),
        migrations.CreateModel(
            name='QuizQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_number', models.IntegerField(help_text='Question order (1-5)')),
                ('question_text', models.TextField(help_text='The actual question')),
                ('option_a', models.TextField(help_text='Option A')),
                ('option_b', models.TextField(help_text='Option B')),
                ('option_c', models.TextField(help_text='Option C')),
                ('option_d', models.TextField(help_text='Option D')),
                ('correct_answer', models.CharField(choices=[('a', 'A'), ('b', 'B'), ('c', 'C'), ('d', 'D')], help_text='Correct answer (a/b/c/d)', max_length=1)),
                ('difficulty_level', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], default='medium', max_length=20)),
                ('source_topic', models.CharField(help_text='Topic/category this question covers', max_length=256)),
                ('source_file', models.CharField(blank=True, help_text='Which uploaded file this question came from', max_length=256, null=True)),
                ('explanation', models.TextField(help_text='Explanation of the correct answer')),
                ('explanation_wrong', models.JSONField(blank=True, default=dict, help_text='Explanations for why other options are wrong')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Quiz Question',
                'verbose_name_plural': 'Quiz Questions',
                'ordering': ['quiz_session', 'question_number'],
            },
        ),
        migrations.CreateModel(
            name='QuizSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_questions', models.IntegerField(default=5, help_text='Total number of questions')),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard'), ('mixed', 'Mixed')], default='mixed', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, help_text='When user started taking quiz', null=True)),
                ('completed_at', models.DateTimeField(blank=True, help_text='When user completed quiz', null=True)),
                ('time_limit_seconds', models.IntegerField(blank=True, help_text='Optional time limit', null=True)),
                ('score', models.FloatField(blank=True, help_text='Final score (0-100)', null=True)),
                ('correct_answers', models.IntegerField(default=0)),
                ('status', models.CharField(choices=[('generated', 'Generated'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('abandoned', 'Abandoned')], default='generated', max_length=20)),
                ('time_spent_seconds', models.IntegerField(default=0, help_text='Total time spent on quiz')),
                ('question_times', models.JSONField(default=list, help_text='Time spent on each question')),
                ('source_distribution', models.JSONField(default=dict, help_text='Distribution of questions from uploaded files vs KB')),
            ],
            options={
                'verbose_name': 'Quiz Session',
                'verbose_name_plural': 'Quiz Sessions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ScoringModelAdjustment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('adjustment_date', models.DateTimeField(auto_now_add=True)),
                ('scope', models.CharField(choices=[('global', 'Global (All Users)'), ('user', 'Per-User Personalized'), ('category', 'Per-Category')], default='global', max_length=20)),
                ('category', models.CharField(blank=True, help_text='If scope=category, which category', max_length=256)),
                ('factor_name', models.CharField(help_text='Factor being adjusted: urgency/complexity/foundational/kb_weight', max_length=100)),
                ('old_weight', models.FloatField(help_text='Previous weight value')),
                ('new_weight', models.FloatField(help_text='New adjusted weight value')),
                ('adjustment_delta', models.FloatField(help_text='Change amount (new - old)')),
                ('reason', models.TextField(help_text='Why this adjustment was made')),
                ('feedback_count_basis', models.IntegerField(default=0, help_text='Number of feedback items that led to this adjustment')),
                ('confidence_score', models.FloatField(default=0.5, help_text='Confidence in this adjustment (0-1)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('applied', models.BooleanField(default=False, help_text='Whether adjustment has been applied to system')),
                ('applied_at', models.DateTimeField(blank=True, null=True)),
                ('plans_affected', models.IntegerField(default=0, help_text='Number of plans generated with this adjustment')),
                ('avg_feedback_score_before', models.FloatField(blank=True, null=True)),
                ('avg_feedback_score_after', models.FloatField(blank=True, null=True)),
                ('adjustment_metadata', models.JSONField(blank=True, default=dict, help_text='Additional data: version, algorithm used, etc')),
            ],
            options={
                'verbose_name': 'Scoring Model Adjustment',
                'verbose_name_plural': 'Scoring Model Adjustments',
                'ordering': ['-adjustment_date'],
            },
        ),
        migrations.CreateModel(
            name='UserAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_plans_generated', models.IntegerField(default=0)),
                ('total_quizzes_taken', models.IntegerField(default=0)),
                ('total_feedback_provided', models.IntegerField(default=0)),
                ('average_quiz_score', models.FloatField(blank=True, null=True)),
                ('average_plan_rating', models.FloatField(blank=True, null=True)),
                ('preferred_sort_method', models.CharField(blank=True, max_length=50)),
                ('avg_study_hours_allocated', models.FloatField(default=0)),
                ('most_active_time', models.CharField(blank=True, help_text='Time of day most active', max_length=50)),
                ('subject_distribution', models.JSONField(default=dict, help_text='Distribution of subjects studied')),
                ('strengths', models.JSONField(default=list, help_text='Subjects/topics user excels at')),
                ('weaknesses', models.JSONField(default=list, help_text='Subjects/topics user struggles with')),
                ('first_activity', models.DateTimeField(blank=True, null=True)),
                ('last_activity', models.DateTimeField(blank=True, null=True)),
                ('total_time_spent_seconds', models.IntegerField(default=0)),
                ('streak_days', models.IntegerField(default=0, help_text='Consecutive days of activity')),
                ('personalized_weights', models.JSONField(default=dict, help_text='User-specific factor weights for prioritization')),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'User Analytics',
                'verbose_name_plural': 'User Analytics',
            },
        ),
        migrations.AddField(
            model_name='studyplanhistory',
            name='analytics_metadata',
            field=models.JSONField(blank=True, default=dict, help_text='Flexible JSON field for additional analytics data'),
        ),
        migrations.AddField(
            model_name='studyplanhistory',
            name='completion_rate',
            field=models.FloatField(blank=True, help_text='User-reported completion rate (0-1)', null=True),
        ),
        migrations.AddField(
            model_name='studyplanhistory',
            name='effectiveness_score',
            field=models.FloatField(blank=True, help_text='User-reported effectiveness (1-5)', null=True),
        ),
        migrations.AddField(
            model_name='studyplanhistory',
            name='feedback_provided',
            field=models.BooleanField(default=False, help_text='Whether user provided feedback'),
        ),
        migrations.AddField(
            model_name='studyplanhistory',
            name='last_viewed_at',
            field=models.DateTimeField(blank=True, help_text='Last time user viewed this plan', null=True),
        ),
        migrations.AddField(
            model_name='studyplanhistory',
            name='quiz_generated',
            field=models.BooleanField(default=False, help_text='Whether quiz was generated for this plan'),
        ),
        migrations.AddField(
            model_name='studyplanhistory',
            name='time_spent_seconds',
            field=models.IntegerField(default=0, help_text='Total time user spent on this plan'),
        ),
        migrations.AddField(
            model_name='studyplanhistory',
            name='viewed_count',
            field=models.IntegerField(default=0, help_text='Number of times user viewed this plan'),
        ),
        migrations.AddIndex(
            model_name='studyplanhistory',
            index=models.Index(fields=['quiz_generated'], name='core_studyp_quiz_ge_306e49_idx'),
        ),
        migrations.AddIndex(
            model_name='studyplanhistory',
            index=models.Index(fields=['feedback_provided'], name='core_studyp_feedbac_186b9f_idx'),
        ),
        migrations.AddField(
            model_name='prioritizationfeedback',
            name='study_plan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedbacks', to='core.studyplanhistory'),
        ),
        migrations.AddField(
            model_name='prioritizationfeedback',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedbacks', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='quizanswer',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='quizanswer',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_answers', to='core.quizquestion'),
        ),
        migrations.AddField(
            model_name='quizsession',
            name='study_plan',
            field=models.ForeignKey(help_text='Study plan this quiz is based on', on_delete=django.db.models.deletion.CASCADE, related_name='quizzes', to='core.studyplanhistory'),
        ),
        migrations.AddField(
            model_name='quizsession',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quizzes', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='quizquestion',
            name='quiz_session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='core.quizsession'),
        ),
        migrations.AddField(
            model_name='scoringmodeladjustment',
            name='user',
            field=models.ForeignKey(blank=True, help_text='If scope=user, which user', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='useranalytics',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='analytics', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='prioritizationfeedback',
            index=models.Index(fields=['user', '-created_at'], name='core_priori_user_id_1659c5_idx'),
        ),
        migrations.AddIndex(
            model_name='prioritizationfeedback',
            index=models.Index(fields=['study_plan', 'feedback_type'], name='core_priori_study_p_e72de5_idx'),
        ),
        migrations.AddIndex(
            model_name='prioritizationfeedback',
            index=models.Index(fields=['processed', 'created_at'], name='core_priori_process_1a5179_idx'),
        ),
        migrations.AddIndex(
            model_name='prioritizationfeedback',
            index=models.Index(fields=['rating_type'], name='core_priori_rating__06534e_idx'),
        ),
        migrations.AddIndex(
            model_name='quizanswer',
            index=models.Index(fields=['user', 'question'], name='core_quizan_user_id_b6d16a_idx'),
        ),
        migrations.AddIndex(
            model_name='quizanswer',
            index=models.Index(fields=['is_correct'], name='core_quizan_is_corr_447e42_idx'),
        ),
        migrations.AddIndex(
            model_name='quizsession',
            index=models.Index(fields=['user', '-created_at'], name='core_quizse_user_id_f304aa_idx'),
        ),
        migrations.AddIndex(
            model_name='quizsession',
            index=models.Index(fields=['study_plan', 'status'], name='core_quizse_study_p_62d3df_idx'),
        ),
        migrations.AddIndex(
            model_name='quizsession',
            index=models.Index(fields=['status'], name='core_quizse_status_677301_idx'),
        ),
        migrations.AddIndex(
            model_name='quizquestion',
            index=models.Index(fields=['quiz_session', 'question_number'], name='core_quizqu_quiz_se_aadcd9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='quizquestion',
            unique_together={('quiz_session', 'question_number')},
        ),
        migrations.AddIndex(
            model_name='scoringmodeladjustment',
            index=models.Index(fields=['scope', '-adjustment_date'], name='core_scorin_scope_33925c_idx'),
        ),
        migrations.AddIndex(
            model_name='scoringmodeladjustment',
            index=models.Index(fields=['user', 'factor_name'], name='core_scorin_user_id_3e84b4_idx'),
        ),
        migrations.AddIndex(
            model_name='scoringmodeladjustment',
            index=models.Index(fields=['category', 'factor_name'], name='core_scorin_categor_964f3e_idx'),
        ),
        migrations.AddIndex(
            model_name='scoringmodeladjustment',
            index=models.Index(fields=['applied', 'adjustment_date'], name='core_scorin_applied_58dddb_idx'),
        ),
    ]
