- this is key use for .env file
    # pINECONE
    PINECONE_API_KEY=pcsk_6wRGHJ_DgdTk7CAJEmFhHTGgjjjLs1jZ2gPG2GQio3dcM7nxC9S7e7UgvtemD5QopN5FqN
    # Openai
    OPENAI_API_KEY=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

Project Goal:
Build a Fullstack AI Student Assistant (Django + Docker) that helps students prioritize reading materials (PDF/Text), generate quizzes, and provide personalized progress tracking with an intelligent Agent Core.

Main Function
1. Ranking Engine – Prioritize subjects, tasks, and assignments from uploaded documents (PDF/Text).
2. Quiz/Test Generator – Automatically create quizzes or tests based on uploaded files.
3. Progress & Award System – Track student progress and reward milestones.
4. Feedback & Dashboard – Provide personalized insights and analytics per student.

Agent Core (Intelligent Backend):
1. Automated Planning – Generate study plans automatically.
2. Feedback Integration – Agent reads data from Postgres and provides contextual feedback.
3. Context & Memory – Maintain long-term student learning context and adapt over time.

System Flow
1. System Flow
    - User uploads up to 5 PDF/Text files.
    - System automatically extracts text using Python libraries (e.g., PyMuPDF / pdfplumber for PDF, built-in parsing for text).
2. LLM Processing
    - Extracted text is passed to an LLM pipeline.
    - The model:
        - Reads and interprets the uploaded files.
        - Accepts optional user prompt/constraint (e.g., "Focus on exam-related topics", "Prioritize assignments with closest deadlines").
3. Ranking Engine
    - LLM + Ranking Algorithm organizes files by priority (Subject → Task → Assignment).
    - Ranking considers both document content and user constraints.
4. Explanation Layer
    - The model generates human-readable explanations:
        - Why each file/task was prioritized.
        - Summary of key points per file.
        - Suggested next steps (study plan).
5. Quiz/Test Generator
    - LLM creates quizzes/tests from the extracted text.
    - Output: MCQs, short answers, or flashcards.
6. Progress & Dashboard
    - Track learning history and completion.
    - Award milestones.
    - Provide feedback (from Postgres context memory) in dashboard view.

Agent Core Functions
- Automated Planning – Generate adaptive study schedules based on ranked files.
- Feedback Integration – Agent pulls student progress from Postgres and updates suggestions.
- Context & Memory – Store learning context, recall past uploads, and personalize ranking/feedback.

Tech Stack
- Backend: Django + PostgreSQL (AI + Ranking Integration)
- Frontend: Django Templates / React Dashboard (cdn)
- AI Core: LLM (with retrieval (RAG) + ranking system)
- Deployment: Dockerized web server
- PDF/Text Handling: pdfplumber / Python-native text parsing
